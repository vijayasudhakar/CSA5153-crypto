import rsa
import os  # To handle directory creation

def generateKeys():
    # Ensure the 'keys' directory exists
    if not os.path.exists('keys'):
        os.makedirs('keys')
    
    # Generate RSA key pair
    publicKey, privateKey = rsa.newkeys(1024)
    
    # Save the public key
    with open('keys/publicKey.pem', 'wb') as p:
        p.write(publicKey.save_pkcs1('PEM'))
    
    # Save the private key
    with open('keys/privateKey.pem', 'wb') as p:
        p.write(privateKey.save_pkcs1('PEM'))

def loadKeys():
    # Load the public key
    with open('keys/publicKey.pem', 'rb') as p:
        publicKey = rsa.PublicKey.load_pkcs1(p.read())
    
    # Load the private key
    with open('keys/privateKey.pem', 'rb') as p:
        privateKey = rsa.PrivateKey.load_pkcs1(p.read())
    
    return publicKey, privateKey

def encrypt(message, key):
    return rsa.encrypt(message.encode('ascii'), key)

def decrypt(ciphertext, key):
    try:
        return rsa.decrypt(ciphertext, key).decode('ascii')
    except:
        return False

def sign(message, key):
    return rsa.sign(message.encode('ascii'), key, 'SHA-1')

def verify(message, signature, key):
    try:
        return rsa.verify(message.encode('ascii'), signature, key) == 'SHA-1'
    except:
        return False

# Generate keys
generateKeys()

# Load keys
publicKey, privateKey = loadKeys()

# User input
message = input('Write your message here: ')

# Encrypt message
ciphertext = encrypt(message, publicKey)

# Sign message
signature = sign(message, privateKey)

# Decrypt message
text = decrypt(ciphertext, privateKey)

# Output results
print(f'Cipher text: {ciphertext}')
print(f'Signature: {signature}')

if text:
    print(f'Message text: {text}')
else:
    print(f'Unable to decrypt the message.')
